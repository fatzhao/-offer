//1 字符串中第一个只出现一次的字符
import java.util.*;

public class Solution {
    public int FirstNotRepeatingChar(String str) {
        if(str.length()<=0) return -1;
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        for(int i=0; i<str.length(); i++){
            char c = str.charAt(i);
            if(map.containsKey(c)){
                int time = map.get(c);
                time++;
                map.put(c,time);
            }
            else map.put(c,1);
        }
        for(int i=0; i<str.length(); i++){
            char c = str.charAt(i);
            if(map.get(c)==1)
                return i;
        }
        return -1;
        
    }
}


//2 字符流中第一个只出现一次的字符
import java.util.*;

public class Solution {
    HashMap<Character, Integer> map = new HashMap<Character, Integer>();
    ArrayList<Character> list = new ArrayList<Character>();
    //Insert one char from stringstream
    public void Insert(char ch)
    {
        if(map.containsKey(ch)){
            map.put(ch,map.get(ch)+1);
        }
        else map.put(ch,1);
        list.add(ch);
    }
  //return the first appearence once char in current stringstream
    public char FirstAppearingOnce()
    {
        char c = '#';
        for(char key:list){
            if(map.get(key)==1){
                c=key;
                break;
            }
        }
        return c;
    }
}
