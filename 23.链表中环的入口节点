/*
 public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}
*/
public class Solution {

    public ListNode EntryNodeOfLoop(ListNode pHead)
    {
        ListNode meetingNode = MeetingNode(pHead);
        if(meetingNode == null)
            return null;
        int nodesInLoop = 1;
        ListNode pNode1 = meetingNode;
        while(pNode1.next!=meetingNode){
            pNode1=pNode1.next;
            nodesInLoop++;
        }
        
        pNode1 = pHead;
        for(int i=0;i<nodesInLoop; i++)
            pNode1=pNode1.next;
        ListNode pNode2=pHead;
        while(pNode1!=pNode2){
            pNode1=pNode1.next;
            pNode2=pNode2.next;
        }
        return pNode1;
    }
    
    public ListNode MeetingNode(ListNode pHead){
        if(pHead==null||pHead.next==null)
            return null;
        ListNode pSlow = pHead;
        ListNode pFast = pHead;
        while(pFast!=null && pFast.next!=null){
            pSlow=pSlow.next;
            pFast=pFast.next.next;
            if(pFast==pSlow)
                return pFast;
        }
        return null;
        
    }
}



//method2

public class Solution {
    public ListNode EntryNodeOfLoop(ListNode pHead){
        if(pHead==null|| pHead.next==null|| pHead.next.next==null)return null;
        ListNode fast=pHead.next.next;
        ListNode slow=pHead.next;
        while(fast!=slow){
            if(fast.next!=null&& fast.next.next!=null){
                fast=fast.next.next;
                slow=slow.next;
            }else{
                return null;
            }
        }
        fast=pHead;
        while(fast!=slow){
            fast=fast.next;
            slow=slow.next;
        }
        return slow;
    }
}
