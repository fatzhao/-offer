/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
//method 1 递归
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null) return;
        if(root.right==null && root.left == null) return;
        
        TreeNode temp = root.left;
        root.left = root.right;
        root.right = temp;
        
        if(root.left!=null)
            Mirror(root.left);
        if(root.right!=null)
            Mirror(root.right);
    }
}


//method2 非递归   和非递归二叉树遍历一个思路
import java.util.*;
public class Solution {
    public void Mirror(TreeNode root) {
        if(root==null) return;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            if(node.left!=null ||node.right!=null){
                TreeNode temp = node.right;
                node.right = node.left;
                node.left = temp;
            }
            if(node.left!=null) stack.push(node.left);
            if(node.right!=null) stack.push(node.right);
        }
    }
}
